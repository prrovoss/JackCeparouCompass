//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Turbo.Plugins.Jack.Labs
{
    using System.Linq;
    using Turbo.Plugins.Default;

    public static class MyPowers
    {
        public static IController Hud;

        private static MyPowersCachePlugin _plugin;
        public static MyPowersCachePlugin Plugin { get { return _plugin ?? (_plugin = Hud.GetPlugin<MyPowersCachePlugin>()); } }

        public static MyPowersCachePlugin.BarbarianPowers Barbarian { get { return Plugin.Barbarian; } }
        public static MyPowersCachePlugin.CrusaderPowers Crusader { get { return Plugin.Crusader; } }
        public static MyPowersCachePlugin.DemonHunterPowers DemonHunter { get { return Plugin.DemonHunter; } }
        public static MyPowersCachePlugin.MonkPowers Monk { get { return Plugin.Monk; } }
        public static MyPowersCachePlugin.WitchdoctorPowers Witchdoctor { get { return Plugin.Witchdoctor; } }
        public static MyPowersCachePlugin.WizardPowers Wizard { get { return Plugin.Wizard; } }
    }

    public class MyPowersCachePlugin : BasePlugin, IAfterCollectHandler
    {
        #region Barbarian
        public class BarbarianPowers {
            public IController Hud { get; private set; }

            public BarbarianPowers(IController hud) {
                Hud = hud;
            }

            // skills
            private IPlayerSkill _ancientSpear;
            private IPlayerSkill _avalanche;
            private IPlayerSkill _bash;
            private IPlayerSkill _battleRage;
            private IPlayerSkill _callOfTheAncients;
            private IPlayerSkill _cleave;
            private IPlayerSkill _earthquake;
            private IPlayerSkill _frenzy;
            private IPlayerSkill _furiousCharge;
            private IPlayerSkill _groundStomp;
            private IPlayerSkill _hammerOfTheAncients;
            private IPlayerSkill _ignorePain;
            private IPlayerSkill _leap;
            private IPlayerSkill _overpower;
            private IPlayerSkill _overpowerCowKing;
            private IPlayerSkill _rend;
            private IPlayerSkill _revenge;
            private IPlayerSkill _seismicSlam;
            private IPlayerSkill _sprint;
            private IPlayerSkill _threateningShout;
            private IPlayerSkill _warCry;
            private IPlayerSkill _weaponThrow;
            private IPlayerSkill _whirlwind;
            private IPlayerSkill _wrathOfTheBerserker;
            public IPlayerSkill AncientSpear { get { return _ancientSpear ?? (_ancientSpear = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 377453)); } }
            public IPlayerSkill Avalanche { get { return _avalanche ?? (_avalanche = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 353447)); } }
            public IPlayerSkill Bash { get { return _bash ?? (_bash = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 79242)); } }
            public IPlayerSkill BattleRage { get { return _battleRage ?? (_battleRage = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 79076)); } }
            public IPlayerSkill CallOfTheAncients { get { return _callOfTheAncients ?? (_callOfTheAncients = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 80049)); } }
            public IPlayerSkill Cleave { get { return _cleave ?? (_cleave = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 80263)); } }
            public IPlayerSkill Earthquake { get { return _earthquake ?? (_earthquake = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 98878)); } }
            public IPlayerSkill Frenzy { get { return _frenzy ?? (_frenzy = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 78548)); } }
            public IPlayerSkill FuriousCharge { get { return _furiousCharge ?? (_furiousCharge = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 97435)); } }
            public IPlayerSkill GroundStomp { get { return _groundStomp ?? (_groundStomp = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 79446)); } }
            public IPlayerSkill HammerOfTheAncients { get { return _hammerOfTheAncients ?? (_hammerOfTheAncients = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 80028)); } }
            public IPlayerSkill IgnorePain { get { return _ignorePain ?? (_ignorePain = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 79528)); } }
            public IPlayerSkill Leap { get { return _leap ?? (_leap = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 93409)); } }
            public IPlayerSkill Overpower { get { return _overpower ?? (_overpower = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 159169)); } }
            public IPlayerSkill OverpowerCowKing { get { return _overpowerCowKing ?? (_overpowerCowKing = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 368239)); } }
            public IPlayerSkill Rend { get { return _rend ?? (_rend = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 70472)); } }
            public IPlayerSkill Revenge { get { return _revenge ?? (_revenge = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 109342)); } }
            public IPlayerSkill SeismicSlam { get { return _seismicSlam ?? (_seismicSlam = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 86989)); } }
            public IPlayerSkill Sprint { get { return _sprint ?? (_sprint = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 78551)); } }
            public IPlayerSkill ThreateningShout { get { return _threateningShout ?? (_threateningShout = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 79077)); } }
            public IPlayerSkill WarCry { get { return _warCry ?? (_warCry = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 375483)); } }
            public IPlayerSkill WeaponThrow { get { return _weaponThrow ?? (_weaponThrow = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 377452)); } }
            public IPlayerSkill Whirlwind { get { return _whirlwind ?? (_whirlwind = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 96296)); } }
            public IPlayerSkill WrathOfTheBerserker { get { return _wrathOfTheBerserker ?? (_wrathOfTheBerserker = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 79607)); } }

            public void CleanupSkills() {
                _ancientSpear = null;
                _avalanche = null;
                _bash = null;
                _battleRage = null;
                _callOfTheAncients = null;
                _cleave = null;
                _earthquake = null;
                _frenzy = null;
                _furiousCharge = null;
                _groundStomp = null;
                _hammerOfTheAncients = null;
                _ignorePain = null;
                _leap = null;
                _overpower = null;
                _overpowerCowKing = null;
                _rend = null;
                _revenge = null;
                _seismicSlam = null;
                _sprint = null;
                _threateningShout = null;
                _warCry = null;
                _weaponThrow = null;
                _whirlwind = null;
                _wrathOfTheBerserker = null;
            }

            // passives
            private ISnoPower _animosity;
            private ISnoPower _berserkerRage;
            private ISnoPower _bloodthirst;
            private ISnoPower _boonOfBulKathos;
            private ISnoPower _brawler;
            private ISnoPower _earthenMight;
            private ISnoPower _inspiringPresence;
            private ISnoPower _juggernaut;
            private ISnoPower _nervesOfSteel;
            private ISnoPower _noEscape;
            private ISnoPower _poundOfFlesh;
            private ISnoPower _rampage;
            private ISnoPower _relentless;
            private ISnoPower _ruthless;
            private ISnoPower _superstition;
            private ISnoPower _swordAndBoard;
            private ISnoPower _toughAsNails;
            private ISnoPower _unforgiving;
            private ISnoPower _weaponsMaster;
            public ISnoPower Animosity { get { return _animosity ?? (_animosity = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 205228)); } }
            public ISnoPower BerserkerRage { get { return _berserkerRage ?? (_berserkerRage = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 205187)); } }
            public ISnoPower Bloodthirst { get { return _bloodthirst ?? (_bloodthirst = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 205217)); } }
            public ISnoPower BoonOfBulKathos { get { return _boonOfBulKathos ?? (_boonOfBulKathos = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 204603)); } }
            public ISnoPower Brawler { get { return _brawler ?? (_brawler = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 205133)); } }
            public ISnoPower EarthenMight { get { return _earthenMight ?? (_earthenMight = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 361661)); } }
            public ISnoPower InspiringPresence { get { return _inspiringPresence ?? (_inspiringPresence = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 205546)); } }
            public ISnoPower Juggernaut { get { return _juggernaut ?? (_juggernaut = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 205707)); } }
            public ISnoPower NervesOfSteel { get { return _nervesOfSteel ?? (_nervesOfSteel = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 217819)); } }
            public ISnoPower NoEscape { get { return _noEscape ?? (_noEscape = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 204725)); } }
            public ISnoPower PoundOfFlesh { get { return _poundOfFlesh ?? (_poundOfFlesh = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 205205)); } }
            public ISnoPower Rampage { get { return _rampage ?? (_rampage = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 296572)); } }
            public ISnoPower Relentless { get { return _relentless ?? (_relentless = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 205398)); } }
            public ISnoPower Ruthless { get { return _ruthless ?? (_ruthless = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 205175)); } }
            public ISnoPower Superstition { get { return _superstition ?? (_superstition = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 205491)); } }
            public ISnoPower SwordAndBoard { get { return _swordAndBoard ?? (_swordAndBoard = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 340877)); } }
            public ISnoPower ToughAsNails { get { return _toughAsNails ?? (_toughAsNails = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 205848)); } }
            public ISnoPower Unforgiving { get { return _unforgiving ?? (_unforgiving = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 205300)); } }
            public ISnoPower WeaponsMaster { get { return _weaponsMaster ?? (_weaponsMaster = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 206147)); } }

            public void CleanupPassives() {
                _animosity = null;
                _berserkerRage = null;
                _bloodthirst = null;
                _boonOfBulKathos = null;
                _brawler = null;
                _earthenMight = null;
                _inspiringPresence = null;
                _juggernaut = null;
                _nervesOfSteel = null;
                _noEscape = null;
                _poundOfFlesh = null;
                _rampage = null;
                _relentless = null;
                _ruthless = null;
                _superstition = null;
                _swordAndBoard = null;
                _toughAsNails = null;
                _unforgiving = null;
                _weaponsMaster = null;
            }

        }
        #endregion Barbarian

        #region Crusader
        public class CrusaderPowers {
            public IController Hud { get; private set; }

            public CrusaderPowers(IController hud) {
                Hud = hud;
            }

            // skills
            private IPlayerSkill _akaratSChampion;
            private IPlayerSkill _blessedHammer;
            private IPlayerSkill _blessedShield;
            private IPlayerSkill _bombardment;
            private IPlayerSkill _condemn;
            private IPlayerSkill _consecration;
            private IPlayerSkill _crushingResolve;
            private IPlayerSkill _fallingSword;
            private IPlayerSkill _fistOfTheHeavens;
            private IPlayerSkill _heavenSFury;
            private IPlayerSkill _ironSkin;
            private IPlayerSkill _judgment;
            private IPlayerSkill _justice;
            private IPlayerSkill _lawsOfFate;
            private IPlayerSkill _lawsOfHope;
            private IPlayerSkill _lawsOfHope2;
            private IPlayerSkill _lawsOfJustice;
            private IPlayerSkill _lawsOfJustice2;
            private IPlayerSkill _lawsOfValor;
            private IPlayerSkill _lawsOfValor2;
            private IPlayerSkill _phalanx;
            private IPlayerSkill _provoke;
            private IPlayerSkill _punish;
            private IPlayerSkill _shieldBash;
            private IPlayerSkill _shieldGlare;
            private IPlayerSkill _slash;
            private IPlayerSkill _smite;
            private IPlayerSkill _steedCharge;
            private IPlayerSkill _sweepAttack;
            public IPlayerSkill AkaratSChampion { get { return _akaratSChampion ?? (_akaratSChampion = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 269032)); } }
            public IPlayerSkill BlessedHammer { get { return _blessedHammer ?? (_blessedHammer = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 266766)); } }
            public IPlayerSkill BlessedShield { get { return _blessedShield ?? (_blessedShield = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 266951)); } }
            public IPlayerSkill Bombardment { get { return _bombardment ?? (_bombardment = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 284876)); } }
            public IPlayerSkill Condemn { get { return _condemn ?? (_condemn = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 266627)); } }
            public IPlayerSkill Consecration { get { return _consecration ?? (_consecration = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 273941)); } }
            public IPlayerSkill CrushingResolve { get { return _crushingResolve ?? (_crushingResolve = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 267818)); } }
            public IPlayerSkill FallingSword { get { return _fallingSword ?? (_fallingSword = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 239137)); } }
            public IPlayerSkill FistOfTheHeavens { get { return _fistOfTheHeavens ?? (_fistOfTheHeavens = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 239218)); } }
            public IPlayerSkill HeavenSFury { get { return _heavenSFury ?? (_heavenSFury = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 316014)); } }
            public IPlayerSkill IronSkin { get { return _ironSkin ?? (_ironSkin = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 291804)); } }
            public IPlayerSkill Judgment { get { return _judgment ?? (_judgment = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 267600)); } }
            public IPlayerSkill Justice { get { return _justice ?? (_justice = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 325216)); } }
            public IPlayerSkill LawsOfFate { get { return _lawsOfFate ?? (_lawsOfFate = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 290960)); } }
            public IPlayerSkill LawsOfHope { get { return _lawsOfHope ?? (_lawsOfHope = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 290912)); } }
            public IPlayerSkill LawsOfHope2 { get { return _lawsOfHope2 ?? (_lawsOfHope2 = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 342279)); } }
            public IPlayerSkill LawsOfJustice { get { return _lawsOfJustice ?? (_lawsOfJustice = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 266722)); } }
            public IPlayerSkill LawsOfJustice2 { get { return _lawsOfJustice2 ?? (_lawsOfJustice2 = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 342280)); } }
            public IPlayerSkill LawsOfValor { get { return _lawsOfValor ?? (_lawsOfValor = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 290946)); } }
            public IPlayerSkill LawsOfValor2 { get { return _lawsOfValor2 ?? (_lawsOfValor2 = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 342281)); } }
            public IPlayerSkill Phalanx { get { return _phalanx ?? (_phalanx = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 330729)); } }
            public IPlayerSkill Provoke { get { return _provoke ?? (_provoke = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 290545)); } }
            public IPlayerSkill Punish { get { return _punish ?? (_punish = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 285903)); } }
            public IPlayerSkill ShieldBash { get { return _shieldBash ?? (_shieldBash = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 353492)); } }
            public IPlayerSkill ShieldGlare { get { return _shieldGlare ?? (_shieldGlare = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 268530)); } }
            public IPlayerSkill Slash { get { return _slash ?? (_slash = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 289243)); } }
            public IPlayerSkill Smite { get { return _smite ?? (_smite = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 286510)); } }
            public IPlayerSkill SteedCharge { get { return _steedCharge ?? (_steedCharge = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 243853)); } }
            public IPlayerSkill SweepAttack { get { return _sweepAttack ?? (_sweepAttack = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 239042)); } }

            public void CleanupSkills() {
                _akaratSChampion = null;
                _blessedHammer = null;
                _blessedShield = null;
                _bombardment = null;
                _condemn = null;
                _consecration = null;
                _crushingResolve = null;
                _fallingSword = null;
                _fistOfTheHeavens = null;
                _heavenSFury = null;
                _ironSkin = null;
                _judgment = null;
                _justice = null;
                _lawsOfFate = null;
                _lawsOfHope = null;
                _lawsOfHope2 = null;
                _lawsOfJustice = null;
                _lawsOfJustice2 = null;
                _lawsOfValor = null;
                _lawsOfValor2 = null;
                _phalanx = null;
                _provoke = null;
                _punish = null;
                _shieldBash = null;
                _shieldGlare = null;
                _slash = null;
                _smite = null;
                _steedCharge = null;
                _sweepAttack = null;
            }

            // passives
            private ISnoPower _blunt;
            private ISnoPower _divineFortress;
            private ISnoPower _fanaticism;
            private ISnoPower _fervor;
            private ISnoPower _finery;
            private ISnoPower _heavenlyStrength;
            private ISnoPower _holdYourGround;
            private ISnoPower _holyCause;
            private ISnoPower _indestructible;
            private ISnoPower _insurmountable;
            private ISnoPower _ironMaiden;
            private ISnoPower _longArmOfTheLaw;
            private ISnoPower _lordCommander;
            private ISnoPower _renewal;
            private ISnoPower _righteousness;
            private ISnoPower _toweringShield;
            private ISnoPower _vigilant;
            private ISnoPower _wrathful;
            public ISnoPower Blunt { get { return _blunt ?? (_blunt = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 348773)); } }
            public ISnoPower DivineFortress { get { return _divineFortress ?? (_divineFortress = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 356176)); } }
            public ISnoPower Fanaticism { get { return _fanaticism ?? (_fanaticism = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 357269)); } }
            public ISnoPower Fervor { get { return _fervor ?? (_fervor = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 357218)); } }
            public ISnoPower Finery { get { return _finery ?? (_finery = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 311629)); } }
            public ISnoPower HeavenlyStrength { get { return _heavenlyStrength ?? (_heavenlyStrength = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 286177)); } }
            public ISnoPower HoldYourGround { get { return _holdYourGround ?? (_holdYourGround = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 302500)); } }
            public ISnoPower HolyCause { get { return _holyCause ?? (_holyCause = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 310804)); } }
            public ISnoPower Indestructible { get { return _indestructible ?? (_indestructible = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 309830)); } }
            public ISnoPower Insurmountable { get { return _insurmountable ?? (_insurmountable = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 310640)); } }
            public ISnoPower IronMaiden { get { return _ironMaiden ?? (_ironMaiden = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 310783)); } }
            public ISnoPower LongArmOfTheLaw { get { return _longArmOfTheLaw ?? (_longArmOfTheLaw = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 310678)); } }
            public ISnoPower LordCommander { get { return _lordCommander ?? (_lordCommander = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 348741)); } }
            public ISnoPower Renewal { get { return _renewal ?? (_renewal = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 356173)); } }
            public ISnoPower Righteousness { get { return _righteousness ?? (_righteousness = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 356147)); } }
            public ISnoPower ToweringShield { get { return _toweringShield ?? (_toweringShield = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 356052)); } }
            public ISnoPower Vigilant { get { return _vigilant ?? (_vigilant = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 310626)); } }
            public ISnoPower Wrathful { get { return _wrathful ?? (_wrathful = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 310775)); } }

            public void CleanupPassives() {
                _blunt = null;
                _divineFortress = null;
                _fanaticism = null;
                _fervor = null;
                _finery = null;
                _heavenlyStrength = null;
                _holdYourGround = null;
                _holyCause = null;
                _indestructible = null;
                _insurmountable = null;
                _ironMaiden = null;
                _longArmOfTheLaw = null;
                _lordCommander = null;
                _renewal = null;
                _righteousness = null;
                _toweringShield = null;
                _vigilant = null;
                _wrathful = null;
            }

        }
        #endregion Crusader

        #region DemonHunter
        public class DemonHunterPowers {
            public IController Hud { get; private set; }

            public DemonHunterPowers(IController hud) {
                Hud = hud;
            }

            // skills
            private IPlayerSkill _bolas;
            private IPlayerSkill _caltrops;
            private IPlayerSkill _chakram;
            private IPlayerSkill _clusterArrow;
            private IPlayerSkill _companion;
            private IPlayerSkill _companionPassive;
            private IPlayerSkill _elementalArrow;
            private IPlayerSkill _entanglingShot;
            private IPlayerSkill _evasiveFire;
            private IPlayerSkill _fanOfKnives;
            private IPlayerSkill _grenade;
            private IPlayerSkill _hungeringArrow;
            private IPlayerSkill _impale;
            private IPlayerSkill _markedForDeath;
            private IPlayerSkill _multishot;
            private IPlayerSkill _preparation;
            private IPlayerSkill _preparationPassive;
            private IPlayerSkill _rainOfVengeance;
            private IPlayerSkill _rapidFire;
            private IPlayerSkill _sentry;
            private IPlayerSkill _shadowPower;
            private IPlayerSkill _smokeScreen;
            private IPlayerSkill _spikeTrap;
            private IPlayerSkill _strafe;
            private IPlayerSkill _vault;
            private IPlayerSkill _vengeance;
            public IPlayerSkill Bolas { get { return _bolas ?? (_bolas = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 77552)); } }
            public IPlayerSkill Caltrops { get { return _caltrops ?? (_caltrops = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 129216)); } }
            public IPlayerSkill Chakram { get { return _chakram ?? (_chakram = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 129213)); } }
            public IPlayerSkill ClusterArrow { get { return _clusterArrow ?? (_clusterArrow = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 129214)); } }
            public IPlayerSkill Companion { get { return _companion ?? (_companion = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 365311)); } }
            public IPlayerSkill CompanionPassive { get { return _companionPassive ?? (_companionPassive = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 365312)); } }
            public IPlayerSkill ElementalArrow { get { return _elementalArrow ?? (_elementalArrow = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 131325)); } }
            public IPlayerSkill EntanglingShot { get { return _entanglingShot ?? (_entanglingShot = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 361936)); } }
            public IPlayerSkill EvasiveFire { get { return _evasiveFire ?? (_evasiveFire = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 377450)); } }
            public IPlayerSkill FanOfKnives { get { return _fanOfKnives ?? (_fanOfKnives = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 77546)); } }
            public IPlayerSkill Grenade { get { return _grenade ?? (_grenade = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 86610)); } }
            public IPlayerSkill HungeringArrow { get { return _hungeringArrow ?? (_hungeringArrow = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 129215)); } }
            public IPlayerSkill Impale { get { return _impale ?? (_impale = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 131366)); } }
            public IPlayerSkill MarkedForDeath { get { return _markedForDeath ?? (_markedForDeath = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 130738)); } }
            public IPlayerSkill Multishot { get { return _multishot ?? (_multishot = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 77649)); } }
            public IPlayerSkill Preparation { get { return _preparation ?? (_preparation = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 129212)); } }
            public IPlayerSkill PreparationPassive { get { return _preparationPassive ?? (_preparationPassive = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 324845)); } }
            public IPlayerSkill RainOfVengeance { get { return _rainOfVengeance ?? (_rainOfVengeance = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 130831)); } }
            public IPlayerSkill RapidFire { get { return _rapidFire ?? (_rapidFire = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 131192)); } }
            public IPlayerSkill Sentry { get { return _sentry ?? (_sentry = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 129217)); } }
            public IPlayerSkill ShadowPower { get { return _shadowPower ?? (_shadowPower = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 130830)); } }
            public IPlayerSkill SmokeScreen { get { return _smokeScreen ?? (_smokeScreen = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 130695)); } }
            public IPlayerSkill SpikeTrap { get { return _spikeTrap ?? (_spikeTrap = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 75301)); } }
            public IPlayerSkill Strafe { get { return _strafe ?? (_strafe = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 134030)); } }
            public IPlayerSkill Vault { get { return _vault ?? (_vault = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 111215)); } }
            public IPlayerSkill Vengeance { get { return _vengeance ?? (_vengeance = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 302846)); } }

            public void CleanupSkills() {
                _bolas = null;
                _caltrops = null;
                _chakram = null;
                _clusterArrow = null;
                _companion = null;
                _companionPassive = null;
                _elementalArrow = null;
                _entanglingShot = null;
                _evasiveFire = null;
                _fanOfKnives = null;
                _grenade = null;
                _hungeringArrow = null;
                _impale = null;
                _markedForDeath = null;
                _multishot = null;
                _preparation = null;
                _preparationPassive = null;
                _rainOfVengeance = null;
                _rapidFire = null;
                _sentry = null;
                _shadowPower = null;
                _smokeScreen = null;
                _spikeTrap = null;
                _strafe = null;
                _vault = null;
                _vengeance = null;
            }

            // passives
            private ISnoPower _ambush;
            private ISnoPower _archery;
            private ISnoPower _awareness;
            private ISnoPower _ballistics;
            private ISnoPower _bloodVengeance;
            private ISnoPower _brooding;
            private ISnoPower _cullTheWeak;
            private ISnoPower _customEngineering;
            private ISnoPower _grenadier;
            private ISnoPower _hotPursuit;
            private ISnoPower _leech;
            private ISnoPower _nightStalker;
            private ISnoPower _numbingTraps;
            private ISnoPower _perfectionist;
            private ISnoPower _sharpshooter;
            private ISnoPower _singleOut;
            private ISnoPower _steadyAim;
            private ISnoPower _tacticalAdvantage;
            private ISnoPower _thrillOfTheHunt;
            public ISnoPower Ambush { get { return _ambush ?? (_ambush = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 352920)); } }
            public ISnoPower Archery { get { return _archery ?? (_archery = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 209734)); } }
            public ISnoPower Awareness { get { return _awareness ?? (_awareness = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 324770)); } }
            public ISnoPower Ballistics { get { return _ballistics ?? (_ballistics = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 155723)); } }
            public ISnoPower BloodVengeance { get { return _bloodVengeance ?? (_bloodVengeance = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 155714)); } }
            public ISnoPower Brooding { get { return _brooding ?? (_brooding = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 210801)); } }
            public ISnoPower CullTheWeak { get { return _cullTheWeak ?? (_cullTheWeak = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 155721)); } }
            public ISnoPower CustomEngineering { get { return _customEngineering ?? (_customEngineering = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208610)); } }
            public ISnoPower Grenadier { get { return _grenadier ?? (_grenadier = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208779)); } }
            public ISnoPower HotPursuit { get { return _hotPursuit ?? (_hotPursuit = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 155725)); } }
            public ISnoPower Leech { get { return _leech ?? (_leech = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 439525)); } }
            public ISnoPower NightStalker { get { return _nightStalker ?? (_nightStalker = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 218350)); } }
            public ISnoPower NumbingTraps { get { return _numbingTraps ?? (_numbingTraps = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 218398)); } }
            public ISnoPower Perfectionist { get { return _perfectionist ?? (_perfectionist = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 155722)); } }
            public ISnoPower Sharpshooter { get { return _sharpshooter ?? (_sharpshooter = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 155715)); } }
            public ISnoPower SingleOut { get { return _singleOut ?? (_singleOut = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 338859)); } }
            public ISnoPower SteadyAim { get { return _steadyAim ?? (_steadyAim = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 164363)); } }
            public ISnoPower TacticalAdvantage { get { return _tacticalAdvantage ?? (_tacticalAdvantage = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 218385)); } }
            public ISnoPower ThrillOfTheHunt { get { return _thrillOfTheHunt ?? (_thrillOfTheHunt = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 211225)); } }

            public void CleanupPassives() {
                _ambush = null;
                _archery = null;
                _awareness = null;
                _ballistics = null;
                _bloodVengeance = null;
                _brooding = null;
                _cullTheWeak = null;
                _customEngineering = null;
                _grenadier = null;
                _hotPursuit = null;
                _leech = null;
                _nightStalker = null;
                _numbingTraps = null;
                _perfectionist = null;
                _sharpshooter = null;
                _singleOut = null;
                _steadyAim = null;
                _tacticalAdvantage = null;
                _thrillOfTheHunt = null;
            }

        }
        #endregion DemonHunter

        #region Monk
        public class MonkPowers {
            public IController Hud { get; private set; }

            public MonkPowers(IController hud) {
                Hud = hud;
            }

            // skills
            private IPlayerSkill _blindingFlash;
            private IPlayerSkill _breathOfHeaven;
            private IPlayerSkill _cripplingWave;
            private IPlayerSkill _cycloneStrike;
            private IPlayerSkill _dashingStrike;
            private IPlayerSkill _deadlyReach;
            private IPlayerSkill _epiphany;
            private IPlayerSkill _explodingPalm;
            private IPlayerSkill _fistsOfThunder;
            private IPlayerSkill _innerSanctuary;
            private IPlayerSkill _lashingTailKick;
            private IPlayerSkill _mantraOfConviction;
            private IPlayerSkill _mantraOfHealing;
            private IPlayerSkill _mantraOfRetribution;
            private IPlayerSkill _mantraOfSalvation;
            private IPlayerSkill _mysticAlly;
            private IPlayerSkill _serenity;
            private IPlayerSkill _sevenSidedStrike;
            private IPlayerSkill _sweepingWind;
            private IPlayerSkill _tempestRush;
            private IPlayerSkill _waveOfLight;
            private IPlayerSkill _wayOfTheHundredFists;
            public IPlayerSkill BlindingFlash { get { return _blindingFlash ?? (_blindingFlash = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 136954)); } }
            public IPlayerSkill BreathOfHeaven { get { return _breathOfHeaven ?? (_breathOfHeaven = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 69130)); } }
            public IPlayerSkill CripplingWave { get { return _cripplingWave ?? (_cripplingWave = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 96311)); } }
            public IPlayerSkill CycloneStrike { get { return _cycloneStrike ?? (_cycloneStrike = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 223473)); } }
            public IPlayerSkill DashingStrike { get { return _dashingStrike ?? (_dashingStrike = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 312736)); } }
            public IPlayerSkill DeadlyReach { get { return _deadlyReach ?? (_deadlyReach = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 96019)); } }
            public IPlayerSkill Epiphany { get { return _epiphany ?? (_epiphany = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 312307)); } }
            public IPlayerSkill ExplodingPalm { get { return _explodingPalm ?? (_explodingPalm = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 97328)); } }
            public IPlayerSkill FistsOfThunder { get { return _fistsOfThunder ?? (_fistsOfThunder = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 95940)); } }
            public IPlayerSkill InnerSanctuary { get { return _innerSanctuary ?? (_innerSanctuary = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 317076)); } }
            public IPlayerSkill LashingTailKick { get { return _lashingTailKick ?? (_lashingTailKick = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 111676)); } }
            public IPlayerSkill MantraOfConviction { get { return _mantraOfConviction ?? (_mantraOfConviction = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 375088)); } }
            public IPlayerSkill MantraOfHealing { get { return _mantraOfHealing ?? (_mantraOfHealing = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 373143)); } }
            public IPlayerSkill MantraOfRetribution { get { return _mantraOfRetribution ?? (_mantraOfRetribution = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 375082)); } }
            public IPlayerSkill MantraOfSalvation { get { return _mantraOfSalvation ?? (_mantraOfSalvation = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 375049)); } }
            public IPlayerSkill MysticAlly { get { return _mysticAlly ?? (_mysticAlly = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 362102)); } }
            public IPlayerSkill Serenity { get { return _serenity ?? (_serenity = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 96215)); } }
            public IPlayerSkill SevenSidedStrike { get { return _sevenSidedStrike ?? (_sevenSidedStrike = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 96694)); } }
            public IPlayerSkill SweepingWind { get { return _sweepingWind ?? (_sweepingWind = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 96090)); } }
            public IPlayerSkill TempestRush { get { return _tempestRush ?? (_tempestRush = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 121442)); } }
            public IPlayerSkill WaveOfLight { get { return _waveOfLight ?? (_waveOfLight = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 96033)); } }
            public IPlayerSkill WayOfTheHundredFists { get { return _wayOfTheHundredFists ?? (_wayOfTheHundredFists = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 97110)); } }

            public void CleanupSkills() {
                _blindingFlash = null;
                _breathOfHeaven = null;
                _cripplingWave = null;
                _cycloneStrike = null;
                _dashingStrike = null;
                _deadlyReach = null;
                _epiphany = null;
                _explodingPalm = null;
                _fistsOfThunder = null;
                _innerSanctuary = null;
                _lashingTailKick = null;
                _mantraOfConviction = null;
                _mantraOfHealing = null;
                _mantraOfRetribution = null;
                _mantraOfSalvation = null;
                _mysticAlly = null;
                _serenity = null;
                _sevenSidedStrike = null;
                _sweepingWind = null;
                _tempestRush = null;
                _waveOfLight = null;
                _wayOfTheHundredFists = null;
            }

            // passives
            private ISnoPower _alacrity;
            private ISnoPower _beaconOfYtar;
            private ISnoPower _chantOfResonance;
            private ISnoPower _combinationStrike;
            private ISnoPower _determination;
            private ISnoPower _exaltedSoul;
            private ISnoPower _fleetFooted;
            private ISnoPower _harmony;
            private ISnoPower _momentum;
            private ISnoPower _mythicRhythm;
            private ISnoPower _nearDeathExperience;
            private ISnoPower _relentlessAssault;
            private ISnoPower _resolve;
            private ISnoPower _seizeTheInitiative;
            private ISnoPower _sixthSense;
            private ISnoPower _theGuardianSPath;
            private ISnoPower _transcendence;
            private ISnoPower _unity;
            public ISnoPower Alacrity { get { return _alacrity ?? (_alacrity = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 156492)); } }
            public ISnoPower BeaconOfYtar { get { return _beaconOfYtar ?? (_beaconOfYtar = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 209104)); } }
            public ISnoPower ChantOfResonance { get { return _chantOfResonance ?? (_chantOfResonance = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 156467)); } }
            public ISnoPower CombinationStrike { get { return _combinationStrike ?? (_combinationStrike = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 218415)); } }
            public ISnoPower Determination { get { return _determination ?? (_determination = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 402633)); } }
            public ISnoPower ExaltedSoul { get { return _exaltedSoul ?? (_exaltedSoul = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 209027)); } }
            public ISnoPower FleetFooted { get { return _fleetFooted ?? (_fleetFooted = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 209029)); } }
            public ISnoPower Harmony { get { return _harmony ?? (_harmony = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 404168)); } }
            public ISnoPower Momentum { get { return _momentum ?? (_momentum = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 341559)); } }
            public ISnoPower MythicRhythm { get { return _mythicRhythm ?? (_mythicRhythm = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 315271)); } }
            public ISnoPower NearDeathExperience { get { return _nearDeathExperience ?? (_nearDeathExperience = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 156484)); } }
            public ISnoPower RelentlessAssault { get { return _relentlessAssault ?? (_relentlessAssault = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 404245)); } }
            public ISnoPower Resolve { get { return _resolve ?? (_resolve = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 211581)); } }
            public ISnoPower SeizeTheInitiative { get { return _seizeTheInitiative ?? (_seizeTheInitiative = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 209628)); } }
            public ISnoPower SixthSense { get { return _sixthSense ?? (_sixthSense = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 209622)); } }
            public ISnoPower TheGuardianSPath { get { return _theGuardianSPath ?? (_theGuardianSPath = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 209812)); } }
            public ISnoPower Transcendence { get { return _transcendence ?? (_transcendence = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 209250)); } }
            public ISnoPower Unity { get { return _unity ?? (_unity = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 368899)); } }

            public void CleanupPassives() {
                _alacrity = null;
                _beaconOfYtar = null;
                _chantOfResonance = null;
                _combinationStrike = null;
                _determination = null;
                _exaltedSoul = null;
                _fleetFooted = null;
                _harmony = null;
                _momentum = null;
                _mythicRhythm = null;
                _nearDeathExperience = null;
                _relentlessAssault = null;
                _resolve = null;
                _seizeTheInitiative = null;
                _sixthSense = null;
                _theGuardianSPath = null;
                _transcendence = null;
                _unity = null;
            }

        }
        #endregion Monk

        #region Witchdoctor
        public class WitchdoctorPowers {
            public IController Hud { get; private set; }

            public WitchdoctorPowers(IController hud) {
                Hud = hud;
            }

            // skills
            private IPlayerSkill _acidCloud;
            private IPlayerSkill _bigBadVoodoo;
            private IPlayerSkill _corpseSpiders;
            private IPlayerSkill _fetishArmy;
            private IPlayerSkill _firebats;
            private IPlayerSkill _firebomb;
            private IPlayerSkill _gargantuan;
            private IPlayerSkill _graspOfTheDead;
            private IPlayerSkill _haunt;
            private IPlayerSkill _hex;
            private IPlayerSkill _horrify;
            private IPlayerSkill _locustSwarm;
            private IPlayerSkill _massConfusion;
            private IPlayerSkill _piranhas;
            private IPlayerSkill _plagueOfToads;
            private IPlayerSkill _poisonDart;
            private IPlayerSkill _sacrifice;
            private IPlayerSkill _soulHarvest;
            private IPlayerSkill _spiritBarrage;
            private IPlayerSkill _spiritWalk;
            private IPlayerSkill _summonZombieDogs;
            private IPlayerSkill _veSummonZombieDogs;
            private IPlayerSkill _wallOfDeath;
            private IPlayerSkill _zombieCharger;
            public IPlayerSkill AcidCloud { get { return _acidCloud ?? (_acidCloud = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 70455)); } }
            public IPlayerSkill BigBadVoodoo { get { return _bigBadVoodoo ?? (_bigBadVoodoo = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 117402)); } }
            public IPlayerSkill CorpseSpiders { get { return _corpseSpiders ?? (_corpseSpiders = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 69866)); } }
            public IPlayerSkill FetishArmy { get { return _fetishArmy ?? (_fetishArmy = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 72785)); } }
            public IPlayerSkill Firebats { get { return _firebats ?? (_firebats = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 105963)); } }
            public IPlayerSkill Firebomb { get { return _firebomb ?? (_firebomb = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 67567)); } }
            public IPlayerSkill Gargantuan { get { return _gargantuan ?? (_gargantuan = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 30624)); } }
            public IPlayerSkill GraspOfTheDead { get { return _graspOfTheDead ?? (_graspOfTheDead = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 69182)); } }
            public IPlayerSkill Haunt { get { return _haunt ?? (_haunt = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 83602)); } }
            public IPlayerSkill Hex { get { return _hex ?? (_hex = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 30631)); } }
            public IPlayerSkill Horrify { get { return _horrify ?? (_horrify = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 67668)); } }
            public IPlayerSkill LocustSwarm { get { return _locustSwarm ?? (_locustSwarm = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 69867)); } }
            public IPlayerSkill MassConfusion { get { return _massConfusion ?? (_massConfusion = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 67600)); } }
            public IPlayerSkill Piranhas { get { return _piranhas ?? (_piranhas = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 347265)); } }
            public IPlayerSkill PlagueOfToads { get { return _plagueOfToads ?? (_plagueOfToads = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 106465)); } }
            public IPlayerSkill PoisonDart { get { return _poisonDart ?? (_poisonDart = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 103181)); } }
            public IPlayerSkill Sacrifice { get { return _sacrifice ?? (_sacrifice = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 102572)); } }
            public IPlayerSkill SoulHarvest { get { return _soulHarvest ?? (_soulHarvest = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 67616)); } }
            public IPlayerSkill SpiritBarrage { get { return _spiritBarrage ?? (_spiritBarrage = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 108506)); } }
            public IPlayerSkill SpiritWalk { get { return _spiritWalk ?? (_spiritWalk = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 106237)); } }
            public IPlayerSkill SummonZombieDogs { get { return _summonZombieDogs ?? (_summonZombieDogs = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 102573)); } }
            public IPlayerSkill VeSummonZombieDogs { get { return _veSummonZombieDogs ?? (_veSummonZombieDogs = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 109560)); } }
            public IPlayerSkill WallOfDeath { get { return _wallOfDeath ?? (_wallOfDeath = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 134837)); } }
            public IPlayerSkill ZombieCharger { get { return _zombieCharger ?? (_zombieCharger = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 74003)); } }

            public void CleanupSkills() {
                _acidCloud = null;
                _bigBadVoodoo = null;
                _corpseSpiders = null;
                _fetishArmy = null;
                _firebats = null;
                _firebomb = null;
                _gargantuan = null;
                _graspOfTheDead = null;
                _haunt = null;
                _hex = null;
                _horrify = null;
                _locustSwarm = null;
                _massConfusion = null;
                _piranhas = null;
                _plagueOfToads = null;
                _poisonDart = null;
                _sacrifice = null;
                _soulHarvest = null;
                _spiritBarrage = null;
                _spiritWalk = null;
                _summonZombieDogs = null;
                _veSummonZombieDogs = null;
                _wallOfDeath = null;
                _zombieCharger = null;
            }

            // passives
            private ISnoPower _badMedicine;
            private ISnoPower _bloodRitual;
            private ISnoPower _circleOfLife;
            private ISnoPower _confidenceRitual;
            private ISnoPower _creepingDeath;
            private ISnoPower _fetishSycophants;
            private ISnoPower _fierceLoyalty;
            private ISnoPower _graveInjustice;
            private ISnoPower _gruesomeFeast;
            private ISnoPower _jungleFortitude;
            private ISnoPower _midnightFeast;
            private ISnoPower _pierceTheVeil;
            private ISnoPower _rushOfEssence;
            private ISnoPower _spiritualAttunement;
            private ISnoPower _spiritVessel;
            private ISnoPower _swamplandAttunement;
            private ISnoPower _tribalRites;
            private ISnoPower _visionQuest;
            private ISnoPower _zombieHandler;
            public ISnoPower BadMedicine { get { return _badMedicine ?? (_badMedicine = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 217826)); } }
            public ISnoPower BloodRitual { get { return _bloodRitual ?? (_bloodRitual = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208568)); } }
            public ISnoPower CircleOfLife { get { return _circleOfLife ?? (_circleOfLife = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208571)); } }
            public ISnoPower ConfidenceRitual { get { return _confidenceRitual ?? (_confidenceRitual = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 442741)); } }
            public ISnoPower CreepingDeath { get { return _creepingDeath ?? (_creepingDeath = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 340908)); } }
            public ISnoPower FetishSycophants { get { return _fetishSycophants ?? (_fetishSycophants = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 218588)); } }
            public ISnoPower FierceLoyalty { get { return _fierceLoyalty ?? (_fierceLoyalty = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208639)); } }
            public ISnoPower GraveInjustice { get { return _graveInjustice ?? (_graveInjustice = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 218191)); } }
            public ISnoPower GruesomeFeast { get { return _gruesomeFeast ?? (_gruesomeFeast = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208594)); } }
            public ISnoPower JungleFortitude { get { return _jungleFortitude ?? (_jungleFortitude = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 217968)); } }
            public ISnoPower MidnightFeast { get { return _midnightFeast ?? (_midnightFeast = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 340909)); } }
            public ISnoPower PierceTheVeil { get { return _pierceTheVeil ?? (_pierceTheVeil = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208628)); } }
            public ISnoPower RushOfEssence { get { return _rushOfEssence ?? (_rushOfEssence = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208565)); } }
            public ISnoPower SpiritualAttunement { get { return _spiritualAttunement ?? (_spiritualAttunement = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208569)); } }
            public ISnoPower SpiritVessel { get { return _spiritVessel ?? (_spiritVessel = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 218501)); } }
            public ISnoPower SwamplandAttunement { get { return _swamplandAttunement ?? (_swamplandAttunement = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 340910)); } }
            public ISnoPower TribalRites { get { return _tribalRites ?? (_tribalRites = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208601)); } }
            public ISnoPower VisionQuest { get { return _visionQuest ?? (_visionQuest = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 209041)); } }
            public ISnoPower ZombieHandler { get { return _zombieHandler ?? (_zombieHandler = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208563)); } }

            public void CleanupPassives() {
                _badMedicine = null;
                _bloodRitual = null;
                _circleOfLife = null;
                _confidenceRitual = null;
                _creepingDeath = null;
                _fetishSycophants = null;
                _fierceLoyalty = null;
                _graveInjustice = null;
                _gruesomeFeast = null;
                _jungleFortitude = null;
                _midnightFeast = null;
                _pierceTheVeil = null;
                _rushOfEssence = null;
                _spiritualAttunement = null;
                _spiritVessel = null;
                _swamplandAttunement = null;
                _tribalRites = null;
                _visionQuest = null;
                _zombieHandler = null;
            }

        }
        #endregion Witchdoctor

        #region Wizard
        public class WizardPowers {
            public IController Hud { get; private set; }

            public WizardPowers(IController hud) {
                Hud = hud;
            }

            // skills
            private IPlayerSkill _arcaneOrb;
            private IPlayerSkill _arcaneTorrent;
            private IPlayerSkill _archon;
            private IPlayerSkill _blackHole;
            private IPlayerSkill _blizzard;
            private IPlayerSkill _diamondSkin;
            private IPlayerSkill _disintegrate;
            private IPlayerSkill _electrocute;
            private IPlayerSkill _energyArmor;
            private IPlayerSkill _energyTwister;
            private IPlayerSkill _explosiveBlast;
            private IPlayerSkill _familiar;
            private IPlayerSkill _frostNova;
            private IPlayerSkill _hydra;
            private IPlayerSkill _iceArmor;
            private IPlayerSkill _magicMissile;
            private IPlayerSkill _magicWeapon;
            private IPlayerSkill _meteor;
            private IPlayerSkill _mirrorImage;
            private IPlayerSkill _rayOfFrost;
            private IPlayerSkill _shockPulse;
            private IPlayerSkill _slowTime;
            private IPlayerSkill _spectralBlade;
            private IPlayerSkill _stormArmor;
            private IPlayerSkill _teleport;
            private IPlayerSkill _waveOfForce;
            public IPlayerSkill ArcaneOrb { get { return _arcaneOrb ?? (_arcaneOrb = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 30668)); } }
            public IPlayerSkill ArcaneTorrent { get { return _arcaneTorrent ?? (_arcaneTorrent = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 134456)); } }
            public IPlayerSkill Archon { get { return _archon ?? (_archon = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 134872)); } }
            public IPlayerSkill BlackHole { get { return _blackHole ?? (_blackHole = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 243141)); } }
            public IPlayerSkill Blizzard { get { return _blizzard ?? (_blizzard = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 30680)); } }
            public IPlayerSkill DiamondSkin { get { return _diamondSkin ?? (_diamondSkin = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 75599)); } }
            public IPlayerSkill Disintegrate { get { return _disintegrate ?? (_disintegrate = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 91549)); } }
            public IPlayerSkill Electrocute { get { return _electrocute ?? (_electrocute = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 1765)); } }
            public IPlayerSkill EnergyArmor { get { return _energyArmor ?? (_energyArmor = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 86991)); } }
            public IPlayerSkill EnergyTwister { get { return _energyTwister ?? (_energyTwister = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 77113)); } }
            public IPlayerSkill ExplosiveBlast { get { return _explosiveBlast ?? (_explosiveBlast = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 87525)); } }
            public IPlayerSkill Familiar { get { return _familiar ?? (_familiar = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 99120)); } }
            public IPlayerSkill FrostNova { get { return _frostNova ?? (_frostNova = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 30718)); } }
            public IPlayerSkill Hydra { get { return _hydra ?? (_hydra = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 30725)); } }
            public IPlayerSkill IceArmor { get { return _iceArmor ?? (_iceArmor = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 73223)); } }
            public IPlayerSkill MagicMissile { get { return _magicMissile ?? (_magicMissile = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 30744)); } }
            public IPlayerSkill MagicWeapon { get { return _magicWeapon ?? (_magicWeapon = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 76108)); } }
            public IPlayerSkill Meteor { get { return _meteor ?? (_meteor = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 69190)); } }
            public IPlayerSkill MirrorImage { get { return _mirrorImage ?? (_mirrorImage = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 98027)); } }
            public IPlayerSkill RayOfFrost { get { return _rayOfFrost ?? (_rayOfFrost = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 93395)); } }
            public IPlayerSkill ShockPulse { get { return _shockPulse ?? (_shockPulse = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 30783)); } }
            public IPlayerSkill SlowTime { get { return _slowTime ?? (_slowTime = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 1769)); } }
            public IPlayerSkill SpectralBlade { get { return _spectralBlade ?? (_spectralBlade = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 71548)); } }
            public IPlayerSkill StormArmor { get { return _stormArmor ?? (_stormArmor = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 74499)); } }
            public IPlayerSkill Teleport { get { return _teleport ?? (_teleport = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 168344)); } }
            public IPlayerSkill WaveOfForce { get { return _waveOfForce ?? (_waveOfForce = Hud.Game.Me.Powers.UsedSkills.FirstOrDefault(s => s.SnoPower.Sno == 30796)); } }

            public void CleanupSkills() {
                _arcaneOrb = null;
                _arcaneTorrent = null;
                _archon = null;
                _blackHole = null;
                _blizzard = null;
                _diamondSkin = null;
                _disintegrate = null;
                _electrocute = null;
                _energyArmor = null;
                _energyTwister = null;
                _explosiveBlast = null;
                _familiar = null;
                _frostNova = null;
                _hydra = null;
                _iceArmor = null;
                _magicMissile = null;
                _magicWeapon = null;
                _meteor = null;
                _mirrorImage = null;
                _rayOfFrost = null;
                _shockPulse = null;
                _slowTime = null;
                _spectralBlade = null;
                _stormArmor = null;
                _teleport = null;
                _waveOfForce = null;
            }

            // passives
            private ISnoPower _arcaneDynamo;
            private ISnoPower _astralPresence;
            private ISnoPower _audacity;
            private ISnoPower _blur;
            private ISnoPower _coldBlooded;
            private ISnoPower _conflagration;
            private ISnoPower _dominance;
            private ISnoPower _elementalExposure;
            private ISnoPower _evocation;
            private ISnoPower _galvanizingWard;
            private ISnoPower _glassCannon;
            private ISnoPower _illusionist;
            private ISnoPower _paralysis;
            private ISnoPower _powerHungry;
            private ISnoPower _prodigy;
            private ISnoPower _temporalFlux;
            private ISnoPower _unstableAnomaly;
            private ISnoPower _unwaveringWill;
            public ISnoPower ArcaneDynamo { get { return _arcaneDynamo ?? (_arcaneDynamo = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208823)); } }
            public ISnoPower AstralPresence { get { return _astralPresence ?? (_astralPresence = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208472)); } }
            public ISnoPower Audacity { get { return _audacity ?? (_audacity = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 341540)); } }
            public ISnoPower Blur { get { return _blur ?? (_blur = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208468)); } }
            public ISnoPower ColdBlooded { get { return _coldBlooded ?? (_coldBlooded = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 226301)); } }
            public ISnoPower Conflagration { get { return _conflagration ?? (_conflagration = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 218044)); } }
            public ISnoPower Dominance { get { return _dominance ?? (_dominance = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 341344)); } }
            public ISnoPower ElementalExposure { get { return _elementalExposure ?? (_elementalExposure = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 342326)); } }
            public ISnoPower Evocation { get { return _evocation ?? (_evocation = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208473)); } }
            public ISnoPower GalvanizingWard { get { return _galvanizingWard ?? (_galvanizingWard = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208541)); } }
            public ISnoPower GlassCannon { get { return _glassCannon ?? (_glassCannon = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208471)); } }
            public ISnoPower Illusionist { get { return _illusionist ?? (_illusionist = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208547)); } }
            public ISnoPower Paralysis { get { return _paralysis ?? (_paralysis = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 226348)); } }
            public ISnoPower PowerHungry { get { return _powerHungry ?? (_powerHungry = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208478)); } }
            public ISnoPower Prodigy { get { return _prodigy ?? (_prodigy = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208493)); } }
            public ISnoPower TemporalFlux { get { return _temporalFlux ?? (_temporalFlux = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208477)); } }
            public ISnoPower UnstableAnomaly { get { return _unstableAnomaly ?? (_unstableAnomaly = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 208474)); } }
            public ISnoPower UnwaveringWill { get { return _unwaveringWill ?? (_unwaveringWill = Hud.Game.Me.Powers.UsedPassives.FirstOrDefault(s => s.Sno == 298038)); } }

            public void CleanupPassives() {
                _arcaneDynamo = null;
                _astralPresence = null;
                _audacity = null;
                _blur = null;
                _coldBlooded = null;
                _conflagration = null;
                _dominance = null;
                _elementalExposure = null;
                _evocation = null;
                _galvanizingWard = null;
                _glassCannon = null;
                _illusionist = null;
                _paralysis = null;
                _powerHungry = null;
                _prodigy = null;
                _temporalFlux = null;
                _unstableAnomaly = null;
                _unwaveringWill = null;
            }

        }
        #endregion Wizard


        public BarbarianPowers Barbarian { get; private set; }
        public CrusaderPowers Crusader { get; private set; }
        public DemonHunterPowers DemonHunter { get; private set; }
        public MonkPowers Monk { get; private set; }
        public WitchdoctorPowers Witchdoctor { get; private set; }
        public WizardPowers Wizard { get; private set; }

        public long RefreshRate { get; set; }

        private IPlayerSkill leftSkill;
        private IPlayerSkill rightSkill;
        private IPlayerSkill skill1;
        private IPlayerSkill skill2;
        private IPlayerSkill skill3;
        private IPlayerSkill skill4;

        private ISnoPower passive1;
        private ISnoPower passive2;
        private ISnoPower passive3;
        private ISnoPower passive4;

        private long lastTick;

        public MyPowersCachePlugin()
        {
            Enabled = true;
            RefreshRate = 1000;
        }

        public override void Load(IController hud)
        {
            base.Load(hud);

            MyPowers.Hud = hud;

            Barbarian = new BarbarianPowers(Hud);
            Crusader = new CrusaderPowers(Hud);
            DemonHunter = new DemonHunterPowers(Hud);
            Monk = new MonkPowers(Hud);
            Witchdoctor = new WitchdoctorPowers(Hud);
            Wizard = new WizardPowers(Hud);
        }

        public void AfterCollect()
        {
            if (Hud.Game.SpecialArea == SpecialArea.GreaterRift) return;
            if (Hud.Game.Me.InCombat) return;
            if (!Hud.Game.IsInGame) return;

            if (lastTick != 0 && lastTick + RefreshRate >= Hud.Game.CurrentRealTimeMilliseconds) return;

            lastTick = Hud.Game.CurrentRealTimeMilliseconds;

            if (IsDirtySkill(ref leftSkill, 0)) return;
            if (IsDirtySkill(ref rightSkill, 1)) return;
            if (IsDirtySkill(ref skill1, 2)) return;
            if (IsDirtySkill(ref skill2, 3)) return;
            if (IsDirtySkill(ref skill3, 4)) return;
            if (IsDirtySkill(ref skill4, 5)) return;

            if (IsDirtyPassive(ref passive1, 0)) return;
            if (IsDirtyPassive(ref passive2, 1)) return;
            if (IsDirtyPassive(ref passive3, 2)) return;
            IsDirtyPassive(ref passive4, 3);
        }

        private bool IsDirtySkill(ref IPlayerSkill playerSkill, int slotIndex)
        {
            if (Hud.Game.Me.Powers.SkillSlots[slotIndex] == null) return false;

            if (playerSkill == null)
            {
                playerSkill = Hud.Game.Me.Powers.SkillSlots[slotIndex];
                return false;
            }

            var dirty = playerSkill.Key != Hud.Game.Me.Powers.SkillSlots[slotIndex].Key
                || playerSkill.SnoPower == null
                || playerSkill.SnoPower.Sno != Hud.Game.Me.Powers.SkillSlots[slotIndex].SnoPower.Sno
                || playerSkill.Rune != Hud.Game.Me.Powers.SkillSlots[slotIndex].Rune;

            if (dirty)
            {
                CleanupSkills();
            }

            return dirty;
        }

        private bool IsDirtyPassive(ref ISnoPower playerPassive, int slotIndex)
        {
            if (Hud.Game.Me.Powers.PassiveSlots[slotIndex] == null)
                return false;

            if (playerPassive == null)
            {
                playerPassive = Hud.Game.Me.Powers.PassiveSlots[slotIndex];
                return false;
            }

            if (playerPassive.Sno == Hud.Game.Me.Powers.PassiveSlots[slotIndex].Sno)
                return false;

            CleanupPassives();
            return true;
        }

        private void CleanupSkills()
        {
            leftSkill = null;
            rightSkill = null;
            skill1 = null;
            skill2 = null;
            skill3 = null;
            skill4 = null;

            Barbarian.CleanupSkills();
            Crusader.CleanupSkills();
            DemonHunter.CleanupSkills();
            Monk.CleanupSkills();
            Witchdoctor.CleanupSkills();
            Wizard.CleanupSkills();
        }

        private void CleanupPassives()
        {
            passive1 = null;
            passive2 = null;
            passive3 = null;
            passive4 = null;

            Barbarian.CleanupPassives();
            Crusader.CleanupPassives();
            DemonHunter.CleanupPassives();
            Monk.CleanupPassives();
            Witchdoctor.CleanupPassives();
            Wizard.CleanupPassives();
        }
    }
}
