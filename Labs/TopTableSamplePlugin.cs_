namespace Turbo.Plugins.Jack.Labs
{
    using System;
    using Turbo.Plugins.Default;
    using Turbo.Plugins.Jack.Decorators.TopTables;

    public class TopTableSamplePlugin : BasePlugin, IInGameTopPainter, IAfterCollectHandler
    {
        public TopTable Table { get; set; }

        // only used for the demo purpose
        private Random rng;
        private long lastTick;
        private int lastLineIndex = -1;
        private int lastColumnIndex;

        public TopTableSamplePlugin()
        {
            Enabled = true;
            Order = int.MaxValue;
        }

        public override void Load(IController hud)
        {
            base.Load(hud);

            // only used for the demo purpose
            rng = new Random(Hud.Game.CurrentGameTick);

            // create the table with options
            Table = new TopTable(Hud)
            {
                RatioPositionX = 0.2f,
                RatioPositionY = 0.3f,
                HorizontalCenter = true,
                VerticalCenter = false,
                PositionFromRight = false,
                PositionFromBottom = false,
                ShowHeaderLeft = true,
                ShowHeaderTop = true,
                ShowHeaderRight = true,
                ShowHeaderBottom = true,
                DefaultCellDecorator = new TopTableCellDecorator(Hud)
                {
                    BackgroundBrush = Hud.Render.CreateBrush(255, 0, 0, 0, 0),
                    BorderBrush = Hud.Render.CreateBrush(255, 255, 255, 255, -1),
                    TextFont = Hud.Render.CreateFont("tahoma", 8, 255, 255, 255, 255, false, false, true),
                },
                DefaultHighlightDecorator = new TopTableCellDecorator(Hud)
                {
                    BackgroundBrush = Hud.Render.CreateBrush(255, 0, 0, 242, 0),
                    BorderBrush = Hud.Render.CreateBrush(255, 255, 255, 255, -1),
                    TextFont = Hud.Render.CreateFont("tahoma", 8, 255, 255, 255, 255, false, false, true),
                },
                DefaultHeaderDecorator = new TopTableCellDecorator(Hud)
                {
                    //BackgroundBrush = Hud.Render.CreateBrush(0, 0, 0, 0, 0),
                    //BorderBrush = Hud.Render.CreateBrush(255, 255, 255, 255, 1),
                    TextFont = Hud.Render.CreateFont("tahoma", 8, 255, 255, 255, 255, false, false, true),
                }
            };

            // define columns.. talk about useful comments ;p
            Table.DefineColumns(
                new TopTableHeader(Hud, (pos, curPos) => GetHeaderText(pos, curPos, "Col"))
                {
                    RatioHeight = 22 / 1080f, // define only once on first column, value on others will be ignored
                    RatioWidth = 108 / 1080f,
                    HighlightFunc = (pos, curPos) => lastColumnIndex == pos,
                    TextAlign = RandomHorizontalAlign(),
                },
                new TopTableHeader(Hud, (pos, curPos) => GetHeaderText(pos, curPos, "Col"))
                {
                    RatioWidth = 0.1f,
                    HighlightFunc = (pos, curPos) => lastColumnIndex == pos,
                    TextAlign = RandomHorizontalAlign(),
                },
                new TopTableHeader(Hud, (pos, curPos) => GetHeaderText(pos, curPos, "Col"))
                {
                    RatioWidth = 0.1f,
                    HighlightFunc = (pos, curPos) => lastColumnIndex == pos,
                    TextAlign = RandomHorizontalAlign(),
                },
                new TopTableHeader(Hud, (pos, curPos) => GetHeaderText(pos, curPos, "Col"))
                {
                    RatioWidth = 0.1f,
                    HighlightFunc = (pos, curPos) => lastColumnIndex == pos,
                    TextAlign = RandomHorizontalAlign(),
                },
                new TopTableHeader(Hud, (pos, curPos) => GetHeaderText(pos, curPos, "Col"))
                {
                    RatioWidth = 0.1f,
                    HighlightFunc = (pos, curPos) => lastColumnIndex == pos,
                    TextAlign = RandomHorizontalAlign(),
                },
                new TopTableHeader(Hud, (pos, curPos) => GetHeaderText(pos, curPos, "Col"))
                {
                    RatioWidth = 0.1f,
                    HighlightFunc = (pos, curPos) => lastColumnIndex == pos,
                    TextAlign = RandomHorizontalAlign(),
                }
            );

            // add lines
            for (var i = 0; i < 10; i++)
            {
                var r = rng.Next(0, 255);
                var g = rng.Next(0, 255);
                var b = rng.Next(0, 255);
                var align = RandomHorizontalAlign();

                Table.AddLine(
                    new TopTableHeader(Hud, (pos, curPos) => GetHeaderText(pos, curPos, "Line"))
                    {
                        RatioWidth = 62 / 1080f, // define only once on first line, value on other will be ignored
                        RatioHeight = 22 / 1080f,
                        HighlightFunc = (pos, curPos) => lastLineIndex == pos,
                        TextAlign = align,
                        HighlightDecorator = new TopTableCellDecorator(Hud)
                        {
                            BackgroundBrush = Hud.Render.CreateBrush(255, r, g, b, 0),
                            BorderBrush = Hud.Render.CreateBrush(255, 255, 255, 255, -1),
                            TextFont = Hud.Render.CreateFont("tahoma", 8, 255, 255, 255, 255, true, false, true),
                        },
                        CellHighlightDecorator = new TopTableCellDecorator(Hud)
                        {
                            BackgroundBrush = Hud.Render.CreateBrush(255, r, g, b, 0),
                            BorderBrush = Hud.Render.CreateBrush(255, 255, 255, 255, -1),
                            TextFont = Hud.Render.CreateFont("tahoma", 8, 255, 255, 255, 255, true, false, true),
                        },
                    },
                    new TopTableCell(Hud, (line, column, lineSorted, columnSorted) => GetCellText(line, column)) { TextAlign = align },
                    new TopTableCell(Hud, (line, column, lineSorted, columnSorted) => GetCellText(line, column)) { TextAlign = align },
                    new TopTableCell(Hud, (line, column, lineSorted, columnSorted) => GetCellText(line, column)) { TextAlign = align },
                    new TopTableCell(Hud, (line, column, lineSorted, columnSorted) => GetCellText(line, column)) { TextAlign = align },
                    new TopTableCell(Hud, (line, column, lineSorted, columnSorted) => GetCellText(line, column)) { TextAlign = align },
                    new TopTableCell(Hud, (line, column, lineSorted, columnSorted) => GetCellText(line, column)) { TextAlign = align }
                );
            }
        }

        private HorizontalAlign RandomHorizontalAlign()
        {
            var alignRng = rng.Next(0, 31);
            if (alignRng < 10)
            {
                return Default.HorizontalAlign.Left;
            }

            return alignRng < 20 ? Default.HorizontalAlign.Center : Default.HorizontalAlign.Right;
        }

        // well..
        public void PaintTopInGame(ClipState clipState)
        {
            if (clipState != ClipState.BeforeClip) return;

            Table.Paint();
        }

        // dumb method to demonstrate the usage
        public string GetHeaderText(int pos, int curPos, string text)
        {
            return string.Format("{0} {1}", text, pos);
        }

        // dumb method to demonstrate the usage
        public string GetCellText(int line, int column)
        {
            return string.Format("Line {0} / Col {1}", line, column);
        }

        // only used for the demo purpose
        public void AfterCollect()
        {
            if (lastTick + 500 > Hud.Game.CurrentRealTimeMilliseconds && Hud.Game.CurrentRealTimeMilliseconds > lastTick) return;

            lastTick = Hud.Game.CurrentRealTimeMilliseconds;

            lastLineIndex = (lastLineIndex + 1) % Table.Lines.Count;
            lastColumnIndex = (lastColumnIndex + 1) % Table.Columns.Count;
        }
    }
}